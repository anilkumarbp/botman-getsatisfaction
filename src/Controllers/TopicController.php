<?php
/*
 * GetSatisfactionAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace GetSatisfactionAPILib\Controllers;

use GetSatisfactionAPILib\APIException;
use GetSatisfactionAPILib\APIHelper;
use GetSatisfactionAPILib\Configuration;
use GetSatisfactionAPILib\Models;
use GetSatisfactionAPILib\Exceptions;
use GetSatisfactionAPILib\Http\HttpRequest;
use GetSatisfactionAPILib\Http\HttpResponse;
use GetSatisfactionAPILib\Http\HttpMethod;
use GetSatisfactionAPILib\Http\HttpContext;
use phpDocumentor\Reflection\Types\Null_;
use SebastianBergmann\CodeCoverage\Report\PHP;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class TopicController extends BaseController {

    /**
     * @var TopicController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return TopicController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }

        return static::$instance;
    }

    /**
     * Getting the authenticated userâ€™s details
     * @param  string      $companyId             Required parameter: The id of the company being queried
     * @param  bool        $includeArchived       Required parameter: Filter by Archived Topics
     * @param  integer     $activeSince           Optional parameter: Filter by the time of the last activity in the community. Time is set in seconds since epoch.
     * @param  string      $company               Optional parameter: Filter by company ID
     * @param  integer     $page                  Optional parameter: Page number
     * @param  string      $product               Optional parameter: Filter by product name in API queries where the company is specified (for example, /companies/[company name or company ID]/topics)
     * @param  string      $q                     Optional parameter: Search for a particular string
     * @param  string      $query                 Optional parameter: Search for a particular string
     * @param  string      $sort                  Optional parameter: Sort topics by value
     * @param  string      $status                Optional parameter: Filter by style
     * @param  string      $style                 Optional parameter: Filter by style
     * @param  string      $tag                   Optional parameter: Filter by tag
     * @param  string      $user                  Optional parameter: Filter by user ID
     * @param  string      $userDefinedCode       Optional parameter: Filter by Private Tags
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getCompaniesTopicsJsonByCompanyId (
        $company,
        $includeArchived,
        $queryParams = NULL,
        $activeSince = 0,
        $product = NULL,
        $q = NULL,
        $query = NULL,
        $sort = NULL,
        $status = NULL,
        $style = NULL,
        $tag = NULL,
        $user = NULL,
        $userDefinedCode = NULL)
    {

        // the query params is :
        print 'The Query Params is :' . print_r($queryParams) . PHP_EOL;

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;

        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/companies/'.$company.'/topics.json' ;


        // Check if there are filters added by the user
        if($queryParams && isset($queryParams[0]))
        {
            $query = $queryParams[0];

            foreach ($queryParams as $queryParameter)
            {
                if((preg_match('/sort:(\S+)/', $queryParameter, $matches)))
                {
                    $sort = $matches[1];
                }
                if((preg_match('/status:(\S+)/', $queryParameter, $matches)))
                {
                    $status = $matches[1];
                }
                if((preg_match('/style:(\S+)/', $queryParameter, $matches)))
                {
                    $style = $matches[1];
                }
            }


        }
            // process optional query parameters
      $_queryBuilder = APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'query'             => isset($query)?$query:NULL,
            'sort'              => isset($sort)?$sort:NULL,
            'status'            => isset($status)?$status:NULL,
            'style'             => isset($style)?$style:NULL
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);
//
        print 'The Final Query is :' . PHP_EOL . print_r($_queryUrl) . PHP_EOL;

        //prepare headers
        $_headers = array (
            'user-agent'      => 'APIMATIC 2.0',
            'Accept'          => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        print 'The query URL is :' . $_queryUrl . PHP_EOL;

        print 'The headers is :' . print_r($_queryUrl) . PHP_EOL;
//        and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

//        print_r($response);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\CompaniesTopicsJsonByCompanyIdResponse());
    }


}