<?php 
/*
 * GetSatisfactionAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace GetSatisfactionAPILib\Models;

use JsonSerializable;

/**
 * @todo Write general description for this model
 */
class Author implements JsonSerializable {
    /**
     * The URL path to the user’s profile page
     * @maps at_sfn
     * @var string $atSfn public property
     */
    public $atSfn;

    /**
     * The URL path to the full size image the user uploaded for their avatar
     * @var string $avatar public property
     */
    public $avatar;

    /**
     * The URL path to large sized avatar image
     * @maps avatar_url_large
     * @var string $avatarUrlLarge public property
     */
    public $avatarUrlLarge;

    /**
     * The URL path to medium sized avatar image
     * @maps avatar_url_medium
     * @var string $avatarUrlMedium public property
     */
    public $avatarUrlMedium;

    /**
     * The URL path to a mini sized avatar image
     * @maps avatar_url_mini
     * @var string $avatarUrlMini public property
     */
    public $avatarUrlMini;

    /**
     * The URL path to small sized avatar image
     * @maps avatar_url_small
     * @var string $avatarUrlSmall public property
     */
    public $avatarUrlSmall;

    /**
     * The slug for the user’s Get Satisfaction profile (/profile/[canonical name])
     * @maps canonical_name
     * @var string $canonicalName public property
     */
    public $canonicalName;

    /**
     * Whether the user is a champion. Returns “true” or “false”
     * @var bool $champion public property
     */
    public $champion;

    /**
     * Whether the user is an employee. Returns “true” or “false”
     * @var bool $employee public property
     */
    public $employee;

    /**
     * The ID for the user
     * @var integer $id public property
     */
    public $id;

    /**
     * The date and time when the user joined
     * @maps member_since
     * @var string $memberSince public property
     */
    public $memberSince;

    /**
     * The nickname of the user (not the “canonical name”)
     * @var string $name public property
     */
    public $name;

    /**
     * The API path to the user’s information
     * @var string $url public property
     */
    public $url;

    /**
     * Constructor to set initial or default values of member properties
     * @param   string            $atSfn               Initialization value for the property $this->atSfn            
     * @param   string            $avatar              Initialization value for the property $this->avatar           
     * @param   string            $avatarUrlLarge      Initialization value for the property $this->avatarUrlLarge   
     * @param   string            $avatarUrlMedium     Initialization value for the property $this->avatarUrlMedium  
     * @param   string            $avatarUrlMini       Initialization value for the property $this->avatarUrlMini    
     * @param   string            $avatarUrlSmall      Initialization value for the property $this->avatarUrlSmall   
     * @param   string            $canonicalName       Initialization value for the property $this->canonicalName    
     * @param   bool              $champion            Initialization value for the property $this->champion         
     * @param   bool              $employee            Initialization value for the property $this->employee         
     * @param   integer           $id                  Initialization value for the property $this->id               
     * @param   string            $memberSince         Initialization value for the property $this->memberSince      
     * @param   string            $name                Initialization value for the property $this->name             
     * @param   string            $url                 Initialization value for the property $this->url              
     */
    public function __construct()
    {
        if(13 == func_num_args())
        {
            $this->atSfn             = func_get_arg(0);
            $this->avatar            = func_get_arg(1);
            $this->avatarUrlLarge    = func_get_arg(2);
            $this->avatarUrlMedium   = func_get_arg(3);
            $this->avatarUrlMini     = func_get_arg(4);
            $this->avatarUrlSmall    = func_get_arg(5);
            $this->canonicalName     = func_get_arg(6);
            $this->champion          = func_get_arg(7);
            $this->employee          = func_get_arg(8);
            $this->id                = func_get_arg(9);
            $this->memberSince       = func_get_arg(10);
            $this->name              = func_get_arg(11);
            $this->url               = func_get_arg(12);
        }
    }


    /**
     * Encode this object to JSON
     */
    public function jsonSerialize()
    {
        $json = array();
        $json['at_sfn']            = $this->atSfn;
        $json['avatar']            = $this->avatar;
        $json['avatar_url_large']  = $this->avatarUrlLarge;
        $json['avatar_url_medium'] = $this->avatarUrlMedium;
        $json['avatar_url_mini']   = $this->avatarUrlMini;
        $json['avatar_url_small']  = $this->avatarUrlSmall;
        $json['canonical_name']    = $this->canonicalName;
        $json['champion']          = $this->champion;
        $json['employee']          = $this->employee;
        $json['id']                = $this->id;
        $json['member_since']      = $this->memberSince;
        $json['name']              = $this->name;
        $json['url']               = $this->url;

        return $json;
    }
}